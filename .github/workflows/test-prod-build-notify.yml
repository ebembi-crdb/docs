name: Test Production Deployment Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      mock_deployment_status:
        description: 'Mock deployment status'
        required: false
        default: 'ready'
        type: choice
        options:
          - ready
          - error
          - building

jobs:
  test-prod-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Find merged PR
        id: find-pr
        uses: actions/github-script@v7
        with:
          script: |
            // Get the commit that triggered this push
            const commit = context.sha;
            
            // Find PRs that were merged with this commit
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commit
            });
            
            // Find the merged PR
            const mergedPR = prs.data.find(pr => pr.merged_at && pr.base.ref === 'main');
            
            if (mergedPR) {
              console.log(`Found merged PR: #${mergedPR.number}`);
              return {
                number: mergedPR.number,
                title: mergedPR.title,
                author: mergedPR.user.login,
                url: mergedPR.html_url
              };
            } else {
              console.log('No merged PR found for this commit - creating mock PR data for testing');
              return {
                number: 999,
                title: "Test PR for deployment workflow",
                author: context.actor,
                url: `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/999`
              };
            }
        
      - name: Wait for deployment (mocked)
        run: |
          echo "üïê Simulating 90 second wait for deployment..."
          echo "In production, this waits for Netlify deployment to complete"
          sleep 5  # Shortened for testing
          
      - name: Mock Netlify deployment status
        id: netlify-status
        run: |
          # Mock deployment data instead of calling real Netlify API
          
          # Use manual input if available, otherwise random status for testing
          if [ "${{ github.event.inputs.mock_deployment_status }}" != "" ]; then
            DEPLOY_STATE="${{ github.event.inputs.mock_deployment_status }}"
          else
            # Simulate successful deployment for push events
            DEPLOY_STATE="ready"
          fi
          
          # Mock deployment data
          DEPLOY_URL="https://test-deployment-${{ github.run_number }}.netlify.app"
          COMMIT_SHA="${{ github.sha }}"
          DEPLOY_ID="mock-deploy-${{ github.run_number }}"
          
          echo "deploy_state=$DEPLOY_STATE" >> $GITHUB_OUTPUT
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          
          echo "üß™ Mock Deployment Status: $DEPLOY_STATE"
          echo "üîó Mock Deployment URL: $DEPLOY_URL"
          echo "üìù Commit SHA: $COMMIT_SHA"
          echo "üÜî Deploy ID: $DEPLOY_ID"
          
      - name: Create GitHub deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'test-production',
              description: 'Test production deployment (mocked)',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;
            
      - name: Update GitHub deployment status - Success
        if: steps.netlify-status.outputs.deploy_state == 'ready'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment: 'test-production',
              environment_url: '${{ steps.netlify-status.outputs.deploy_url }}',
              description: 'Test production deployment successful'
            });
            
      - name: Update GitHub deployment status - Failure
        if: steps.netlify-status.outputs.deploy_state == 'error'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              environment: 'test-production',
              description: 'Test production deployment failed'
            });
            
      - name: Send Slack notification - Success
        if: steps.netlify-status.outputs.deploy_state == 'ready'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚úÖ Test Production deployment successful!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üß™ TEST Production Build Successful* ‚úÖ\n\n*Site:* <${{ steps.netlify-status.outputs.deploy_url }}|Test Deployment>\n*Commit:* `${{ steps.netlify-status.outputs.commit_sha }}`\n*Branch:* main\n*Deploy ID:* ${{ steps.netlify-status.outputs.deploy_id }}\n*Repository:* ${{ github.repository }}"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
      - name: Comment on PR - Success
        if: steps.netlify-status.outputs.deploy_state == 'ready' && fromJSON(steps.find-pr.outputs.result) != null
        uses: actions/github-script@v7
        with:
          script: |
            const prInfo = ${{ steps.find-pr.outputs.result }};
            if (prInfo) {
              await github.rest.issues.createComment({
                issue_number: prInfo.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üß™ Test Production Deployment Successful!

**‚úÖ Your changes would be live on production (this is a test)**

**Test Deployment Details:**
- **PR:** #${prInfo.number} - ${prInfo.title}
- **Author:** @${prInfo.author}
- **Commit:** \`${{ steps.netlify-status.outputs.commit_sha }}\`
- **Deploy ID:** ${{ steps.netlify-status.outputs.deploy_id }}
- **Test Deploy URL:** ${{ steps.netlify-status.outputs.deploy_url }}
- **Repository:** ${{ github.repository }}

*üß™ This is a test of the production deployment workflow - no actual production deployment occurred.*`
              });
            }
            
      - name: Send Slack notification - Failure
        if: steps.netlify-status.outputs.deploy_state == 'error'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚ùå Test Production deployment failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üß™ TEST Production Build Failed* ‚ùå\n\n*Commit:* `${{ steps.netlify-status.outputs.commit_sha }}`\n*Branch:* main\n*Deploy ID:* ${{ steps.netlify-status.outputs.deploy_id }}\n*Repository:* ${{ github.repository }}\n*Error:* Simulated deployment failure"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
      - name: Comment on PR - Failure
        if: steps.netlify-status.outputs.deploy_state == 'error' && fromJSON(steps.find-pr.outputs.result) != null
        uses: actions/github-script@v7
        with:
          script: |
            const prInfo = ${{ steps.find-pr.outputs.result }};
            if (prInfo) {
              await github.rest.issues.createComment({
                issue_number: prInfo.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚ùå Test Production Deployment Failed

**üö® Simulated deployment failure (this is a test)**

**Test Deployment Details:**
- **PR:** #${prInfo.number} - ${prInfo.title}
- **Author:** @${prInfo.author}
- **Commit:** \`${{ steps.netlify-status.outputs.commit_sha }}\`
- **Deploy ID:** ${{ steps.netlify-status.outputs.deploy_id }}
- **Status:** Failed (simulated)
- **Repository:** ${{ github.repository }}

**Next Steps:**
- This was a test failure simulation
- In production, you would check Netlify dashboard for error details
- Contact the docs team if you need assistance

*üß™ This is a test of the production deployment workflow - no actual production deployment occurred.*`
              });
            }
            
      - name: Handle pending deployment
        if: steps.netlify-status.outputs.deploy_state == 'building' || steps.netlify-status.outputs.deploy_state == 'enqueued'
        run: |
          echo "::warning::Simulated deployment still in progress: ${{ steps.netlify-status.outputs.deploy_state }}"
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚è≥ Test Production deployment in progress...",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üß™ TEST Production Build In Progress* ‚è≥\n\n*Status:* ${{ steps.netlify-status.outputs.deploy_state }}\n*Commit:* `${{ steps.netlify-status.outputs.commit_sha }}`\n*Branch:* main\n*Repository:* ${{ github.repository }}\n*Note:* This is a simulated pending deployment"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
      - name: Comment on PR - Pending
        if: (steps.netlify-status.outputs.deploy_state == 'building' || steps.netlify-status.outputs.deploy_state == 'enqueued') && fromJSON(steps.find-pr.outputs.result) != null
        uses: actions/github-script@v7
        with:
          script: |
            const prInfo = ${{ steps.find-pr.outputs.result }};
            if (prInfo) {
              await github.rest.issues.createComment({
                issue_number: prInfo.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚è≥ Test Production Deployment In Progress

**üîÑ Simulated deployment in progress (this is a test)**

**Test Deployment Details:**
- **PR:** #${prInfo.number} - ${prInfo.title}
- **Author:** @${prInfo.author}
- **Commit:** \`${{ steps.netlify-status.outputs.commit_sha }}\`
- **Deploy ID:** ${{ steps.netlify-status.outputs.deploy_id }}
- **Status:** ${{ steps.netlify-status.outputs.deploy_state }} (simulated)
- **Repository:** ${{ github.repository }}

**Note:** This is a test simulation of a deployment taking longer than expected.

*üß™ This is a test of the production deployment workflow - no actual production deployment occurred.*`
              });
            }

      - name: Test Summary
        if: always()
        run: |
          echo "üéâ Production Deployment Workflow Test Complete!"
          echo "‚úÖ PR Detection: ${{ steps.find-pr.outputs.result != 'null' && 'Working' || 'No PR found' }}"
          echo "‚úÖ GitHub Deployments: Working"
          echo "‚úÖ GitHub Comments: Working"
          echo "‚úÖ Slack Notifications: Working"
          echo "üìä Mock Status: ${{ steps.netlify-status.outputs.deploy_state }}"
          echo "üìç Repository: ${{ github.repository }}"
